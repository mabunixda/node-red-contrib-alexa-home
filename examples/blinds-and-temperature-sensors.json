[
    {
        "id": "controller-blinds-temp",
        "type": "alexa-home-controller",
        "controllername": "Smart Home Hub - Extended",
        "port": "60000",
        "useNode": false,
        "x": 150,
        "y": 100,
        "wires": []
    },
    {
        "id": "living-room-blinds",
        "type": "alexa-home",
        "devicename": "Living Room Blinds",
        "devicetype": "Window covering",
        "controller": "controller-blinds-temp",
        "x": 150,
        "y": 180,
        "wires": [["blinds-control", "debug-blinds"]]
    },
    {
        "id": "bedroom-blinds",
        "type": "alexa-home",
        "devicename": "Bedroom Blinds",
        "devicetype": "Window covering",
        "controller": "controller-blinds-temp",
        "x": 150,
        "y": 220,
        "wires": [["blinds-control", "debug-blinds"]]
    },
    {
        "id": "living-room-temp",
        "type": "alexa-home",
        "devicename": "Living Room Temperature",
        "devicetype": "Temperature sensor",
        "controller": "controller-blinds-temp",
        "x": 150,
        "y": 280,
        "wires": [["temp-processor", "debug-temp"]]
    },
    {
        "id": "outdoor-temp",
        "type": "alexa-home",
        "devicename": "Outdoor Temperature",
        "devicetype": "Temperature sensor",
        "controller": "controller-blinds-temp",
        "x": 150,
        "y": 320,
        "wires": [["temp-processor", "debug-temp"]]
    },
    {
        "id": "blinds-control",
        "type": "function",
        "name": "Smart Blinds Controller",
        "func": "// Smart Blinds Control Logic\n\nconst device = msg.device_name;\nconst position = msg.payload.position || 0;\nconst command = msg.payload.command;\nconst on = msg.payload.on;\n\n// Create output message\nlet output = {\n    device: device,\n    position: position,\n    command: command,\n    timestamp: new Date().toISOString()\n};\n\n// Handle different blind commands\nif (command === 'position') {\n    output.action = 'position_change';\n    output.description = `${device} moved to ${position}% open`;\n    \n    // Add position status\n    if (position === 0) {\n        output.status = 'closed';\n    } else if (position === 100) {\n        output.status = 'fully_open';\n    } else if (position < 25) {\n        output.status = 'mostly_closed';\n    } else if (position > 75) {\n        output.status = 'mostly_open';\n    } else {\n        output.status = 'partially_open';\n    }\n    \n} else if (command === 'switch') {\n    output.action = on ? 'open' : 'close';\n    output.description = `${device} ${on ? 'opened' : 'closed'}`;\n    output.status = on ? 'fully_open' : 'closed';\n}\n\n// Add automation suggestions\nif (device.includes('Living Room') && position < 50) {\n    output.suggestion = 'Consider opening blinds more for natural light';\n} else if (device.includes('Bedroom') && position > 75) {\n    output.suggestion = 'Blinds are open - good for morning wake-up';\n}\n\n// Send to different outputs based on action\nif (output.action === 'position_change') {\n    return [output, null, null]; // Position changes\n} else if (output.action === 'open' || output.action === 'close') {\n    return [null, output, null]; // Open/close actions\n} else {\n    return [null, null, output]; // Other/unknown\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            ["mqtt-blinds-position"],
            ["mqtt-blinds-switch"],
            ["debug-blinds-other"]
        ]
    },
    {
        "id": "temp-processor",
        "type": "function",
        "name": "Temperature Data Processor",
        "func": "// Temperature Sensor Data Processing\n\nconst device = msg.device_name;\nconst temperature = msg.payload.temperature;\nconst scale = msg.payload.scale || 'CELSIUS';\nconst command = msg.payload.command;\n\n// Create enhanced output\nlet output = {\n    device: device,\n    temperature: temperature,\n    scale: scale,\n    command: command,\n    timestamp: new Date().toISOString()\n};\n\n// Convert temperature if needed\nif (scale === 'CELSIUS') {\n    output.fahrenheit = (temperature * 9/5) + 32;\n    output.kelvin = temperature + 273.15;\n} else {\n    output.celsius = (temperature - 32) * 5/9;\n    output.kelvin = ((temperature - 32) * 5/9) + 273.15;\n}\n\n// Add comfort level assessment\nconst tempC = scale === 'CELSIUS' ? temperature : output.celsius;\nif (tempC < 16) {\n    output.comfort = 'cold';\n    output.recommendation = 'Consider heating';\n} else if (tempC < 20) {\n    output.comfort = 'cool';\n    output.recommendation = 'Slightly cool';\n} else if (tempC <= 24) {\n    output.comfort = 'comfortable';\n    output.recommendation = 'Ideal temperature';\n} else if (tempC <= 28) {\n    output.comfort = 'warm';\n    output.recommendation = 'Consider cooling';\n} else {\n    output.comfort = 'hot';\n    output.recommendation = 'Too hot - cooling needed';\n}\n\n// Add location-specific logic\nif (device.includes('Outdoor')) {\n    output.location = 'outdoor';\n    // Add weather context\n    if (tempC < 0) {\n        output.weather = 'freezing';\n    } else if (tempC < 10) {\n        output.weather = 'cold';\n    } else if (tempC < 20) {\n        output.weather = 'mild';\n    } else if (tempC < 30) {\n        output.weather = 'warm';\n    } else {\n        output.weather = 'hot';\n    }\n} else {\n    output.location = 'indoor';\n    // Add HVAC suggestions\n    if (tempC < 18) {\n        output.hvac_suggestion = 'heating_recommended';\n    } else if (tempC > 26) {\n        output.hvac_suggestion = 'cooling_recommended';\n    } else {\n        output.hvac_suggestion = 'temperature_optimal';\n    }\n}\n\n// Add trend tracking (simple)\nflow.set(device + '_last_temp', temperature);\nflow.set(device + '_last_time', Date.now());\n\nconst lastTemp = flow.get(device + '_previous_temp');\nif (lastTemp !== undefined) {\n    output.trend = temperature > lastTemp ? 'rising' : \n                  temperature < lastTemp ? 'falling' : 'stable';\n    output.change = +(temperature - lastTemp).toFixed(1);\n}\n\n// Store current as previous for next reading\nflow.set(device + '_previous_temp', temperature);\n\nreturn output;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 300,
        "wires": [["mqtt-temperature", "temp-display"]]
    },
    {
        "id": "mqtt-blinds-position",
        "type": "mqtt out",
        "name": "MQTT - Blinds Position",
        "topic": "home/blinds/position",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "x": 710,
        "y": 160,
        "wires": []
    },
    {
        "id": "mqtt-blinds-switch",
        "type": "mqtt out",
        "name": "MQTT - Blinds Switch",
        "topic": "home/blinds/switch",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "x": 710,
        "y": 200,
        "wires": []
    },
    {
        "id": "mqtt-temperature",
        "type": "mqtt out",
        "name": "MQTT - Temperature",
        "topic": "home/sensors/temperature",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "x": 700,
        "y": 280,
        "wires": []
    },
    {
        "id": "debug-blinds",
        "type": "debug",
        "name": "Blinds Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 140,
        "wires": []
    },
    {
        "id": "debug-temp",
        "type": "debug",
        "name": "Temperature Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 360,
        "wires": []
    },
    {
        "id": "debug-blinds-other",
        "type": "debug",
        "name": "Blinds Other",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 240,
        "wires": []
    },
    {
        "id": "temp-display",
        "type": "ui_text",
        "name": "Temperature Display",
        "group": "temp-group",
        "order": 1,
        "width": "6",
        "height": "2",
        "format": "{{msg.device}}: {{msg.temperature}}Â°{{msg.scale}} ({{msg.comfort}})",
        "layout": "row-spread",
        "x": 710,
        "y": 320,
        "wires": []
    },
    {
        "id": "temp-injector",
        "type": "inject",
        "name": "Inject Test Temperature",
        "props": [
            {
                "p": "payload.temperature",
                "v": "22.5",
                "vt": "num"
            },
            {
                "p": "output",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 400,
        "wires": [["living-room-temp"]]
    },
    {
        "id": "blinds-injector",
        "type": "inject",
        "name": "Inject Test Blinds Position",
        "props": [
            {
                "p": "payload.position",
                "v": "75",
                "vt": "num"
            },
            {
                "p": "output",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 460,
        "wires": [["living-room-blinds"]]
    },
    {
        "id": "automation-controller",
        "type": "function",
        "name": "Smart Home Automation",
        "func": "// Smart Home Automation Logic\n// Combine temperature and blinds data for intelligent control\n\nconst temp = flow.get('living_room_temp') || 20;\nconst outdoor_temp = flow.get('outdoor_temp') || 15;\nconst blinds_position = flow.get('living_room_blinds_position') || 0;\nconst time = new Date();\nconst hour = time.getHours();\n\n// Store current sensor reading\nif (msg.device_name && msg.device_name.includes('Temperature')) {\n    flow.set(msg.device_name.toLowerCase().replace(' ', '_'), msg.payload.temperature);\n    return null; // Don't output for temperature updates\n}\n\nif (msg.device_name && msg.device_name.includes('Blinds')) {\n    flow.set(msg.device_name.toLowerCase().replace(' ', '_') + '_position', msg.payload.position);\n}\n\n// Automation rules\nlet automation = {\n    timestamp: new Date().toISOString(),\n    rules_triggered: [],\n    actions: []\n};\n\n// Morning: Open blinds if it's sunny and warm\nif (hour >= 7 && hour <= 9 && outdoor_temp > 10 && blinds_position < 50) {\n    automation.rules_triggered.push('morning_natural_light');\n    automation.actions.push({\n        device: 'Living Room Blinds',\n        action: 'set_position',\n        value: 75,\n        reason: 'Morning natural light optimization'\n    });\n}\n\n// Afternoon: Close blinds if it's too hot to prevent overheating\nif (hour >= 12 && hour <= 16 && temp > 26 && blinds_position > 50) {\n    automation.rules_triggered.push('afternoon_heat_protection');\n    automation.actions.push({\n        device: 'Living Room Blinds',\n        action: 'set_position',\n        value: 25,\n        reason: 'Prevent afternoon overheating'\n    });\n}\n\n// Evening: Close blinds for privacy\nif (hour >= 19 && blinds_position > 25) {\n    automation.rules_triggered.push('evening_privacy');\n    automation.actions.push({\n        device: 'Living Room Blinds',\n        action: 'set_position',\n        value: 0,\n        reason: 'Evening privacy'\n    });\n}\n\n// Temperature-based blinds control\nif (temp < 18 && outdoor_temp > temp && blinds_position < 75) {\n    automation.rules_triggered.push('heating_assistance');\n    automation.actions.push({\n        device: 'Living Room Blinds',\n        action: 'set_position',\n        value: 100,\n        reason: 'Utilize solar heating'\n    });\n}\n\n// Only output if automation rules were triggered\nif (automation.rules_triggered.length > 0) {\n    msg.automation = automation;\n    return msg;\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [["debug-automation"]]
    },
    {
        "id": "debug-automation",
        "type": "debug",
        "name": "Automation Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "automation",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 500,
        "wires": []
    }
]
